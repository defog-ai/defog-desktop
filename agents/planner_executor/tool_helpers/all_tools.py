# this is where you can import your custom tools
# create a folder insider toolboxes and add your tools (aka python functions) there inside a tools.py file
# and finally add all your tools in the tools array below in the given format
from ..toolboxes.data_fetching.tools import *
from ..toolboxes.stats.tools import *
from ..toolboxes.plots.tools import *

import inspect

tool_name_dict = tools = {
    "data_fetcher_and_aggregator": {
        "function_name": "data_fetcher_and_aggregator",
        "tool_name": "Fetch data from database",
        "description": "Converting a natural language question into a SQL query, that then runs on an external database. Fetches, joins, filters, aggregates, and performs arithmetic computations on data. Remember that this tool does not have access to the data returned by the previous steps. It only has access to the data in the database. We should attempt to give this tool very specific questions that pertain to the user question, instead of overly broad or generic ones. However, do not make any mention of which table to query when you give it your question. You can use this exactly once among all steps.",
        "fn": data_fetcher_and_aggregator,
        "code": inspect.getsource(data_fetcher_and_aggregator),
        "input_metadata": {
            "question": {
                "name": "question",
                "default": None,
                "description": "natural language description of the data required to answer this question (or get the required information for subsequent steps) as a string",
                "type": "str",
            },
        },
        "toolbox": "data_fetching",
        "output_metadata": [
            {
                "name": "output_df",
                "description": "pandas dataframe",
                "type": "pandas.core.frame.DataFrame",
            }
        ],
    },
    "send_email": {
        "function_name": "send_email",
        "tool_name": "Send Email",
        "description": "This function sends a full dataframe from a preceding step as an email to the specified recipient. It should be used at the end of the analysis, and only once. The recipient email address should be provided as a string, and the dataframe that has to be emailed should be provided as global_dict.<input_df_name>.",
        "fn": send_email,
        "code": inspect.getsource(send_email),
        "input_metadata": {
            "recipient_email_address": {
                "name": "recipient_email_address",
                "default": None,
                "description": "email address of the recipient",
                "type": "str",
            },
            "email_subject": {
                "name": "email_subject",
                "default": None,
                "description": "Title of the email to be sent. This is usually a descriptive summary of the question asked.",
                "type": "str",
            },
            "full_data": {
                "name": "full_data",
                "default": None,
                "description": "global_dict.<input_df_name>",
                "type": "pandas.core.frame.DataFrame",
            },
        },
        "toolbox": "data_fetching",
        "output_metadata": [
            {
                "name": "output_df",
                "description": "pandas dataframe",
                "type": "pandas.core.frame.DataFrame",
            }
        ],
    },
    "t_test": {
        "function_name": "t_test",
        "fn": t_test,
        "code": inspect.getsource(t_test),
        "tool_name": "T Test",
        "description": "This function gets two groups and runs a t-test to check if there is a significant difference between their means. There are two ways to run the test: paired and unpaired. Paired test has one group column, unpaired has one group column.",
        "input_metadata": {
            "full_data": {
                "name": "full_data",
                "default": None,
                "description": '"global_dict.<input_df_name>"',
                "type": "pandas.core.frame.DataFrame",
            },
            "group_column": {
                "name": "group_column",
                "default": None,
                "description": "group column",
                "type": "DBColumn",
            },
            "score_column": {
                "name": "score_column",
                "default": None,
                "description": "score column",
                "type": "DBColumn",
            },
            "name_column": {
                "name": "name_column",
                "default": None,
                "description": "name column or None",
                "type": "DBColumn",
            },
            "t_test_type": {
                "name": "t_test_type",
                "default": ["unpaired", "paired"],
                "description": "type of t test as a string (paired or unpaired)",
                "type": "DropdownSingleSelect",
            },
        },
        "toolbox": "stats",
        "output_metadata": [
            {
                "name": "output_df",
                "description": "pandas dataframe",
                "type": "pandas.core.frame.DataFrame",
            }
        ],
    },
    "fold_change": {
        "function_name": "fold_change",
        "fn": fold_change,
        "code": inspect.getsource(fold_change),
        "tool_name": "Fold Change",
        "description": 'This function calculates the fold change over time for different groups. Fold change is the ratio of the final value to the initial value. Should only be used if the user explicitly mentions the words "fold change" in their request.',
        "input_metadata": {
            "full_data": {
                "name": "full_data",
                "default": None,
                "description": '"global_dict.<input_df_name>"',
                "type": "pandas.core.frame.DataFrame",
            },
            "value_column": {
                "name": "value_column",
                "default": None,
                "description": "value column (the numerical value)",
                "type": "DBColumn",
            },
            "individual_id_column": {
                "name": "individual_id_column",
                "default": None,
                "description": "individual id column (the column that represents individual ids to calculate fold change for)",
                "type": "DBColumn",
            },
            "time_column": {
                "name": "time_column",
                "default": None,
                "description": "time column (the column that represents the time point)",
                "type": "DBColumn",
            },
            "group_column": {
                "name": "group_column",
                "default": None,
                "description": "group column or None (the column that represents the groups that individuals belong to, like cohort or study)",
                "type": "DBColumn",
            },
        },
        "toolbox": "stats",
        "output_metadata": [
            {
                "name": "output_df",
                "description": "pandas dataframe",
                "type": "pandas.core.frame.DataFrame",
            }
        ],
    },
    "anova_test": {
        "function_name": "anova_test",
        "fn": anova_test,
        "code": inspect.getsource(anova_test),
        "tool_name": "ANOVA Test",
        "description": "This function gets more than two groups and runs an anova test to check if there is a significant difference between their means.",
        "input_metadata": {
            "full_data": {
                "name": "full_data",
                "default": None,
                "description": '"global_dict.<input_df_name>"',
                "type": "pandas.core.frame.DataFrame",
            },
            "group_column": {
                "name": "group_column",
                "default": None,
                "description": "group column",
                "type": "DBColumn",
            },
            "score_column": {
                "name": "score_column",
                "default": None,
                "description": "score column",
                "type": "DBColumn",
            },
        },
        "toolbox": "stats",
        "output_metadata": [
            {
                "name": "output_df",
                "description": "pandas dataframe",
                "type": "pandas.core.frame.DataFrame",
            }
        ],
    },
    "wilcoxon_test": {
        "function_name": "wilcoxon_test",
        "fn": wilcoxon_test,
        "code": inspect.getsource(wilcoxon_test),
        "tool_name": "Wilcoxon Test",
        "description": "This function gets two groups and runs a wilcoxon test to check if there is a significant difference between their means.",
        "input_metadata": {
            "full_data": {
                "name": "full_data",
                "default": None,
                "description": '"global_dict.<input_df_name>"',
                "type": "pandas.core.frame.DataFrame",
            },
            "group_column": {
                "name": "group_column",
                "default": None,
                "description": "group column",
                "type": "DBColumn",
            },
            "score_column": {
                "name": "score_column",
                "default": None,
                "description": "score column",
                "type": "DBColumn",
            },
            "name_column": {
                "name": "name_column",
                "default": None,
                "description": " name column",
                "type": "DBColumn",
            },
        },
        "toolbox": "stats",
        "output_metadata": [
            {
                "name": "output_df",
                "description": "pandas dataframe",
                "type": "pandas.core.frame.DataFrame",
            }
        ],
    },
    "line_plot": {
        "function_name": "line_plot",
        "fn": line_plot,
        "code": inspect.getsource(line_plot),
        "tool_name": "Line Plot",
        "description": "This function generates a line plot using python's seaborn library. It should be used when the user wants to see how a variable changes over time, and should be used immediately after the data_fetcher tool.",
        "input_metadata": {
            "full_data": {
                "name": "full_data",
                "default": None,
                "description": "global_dict.<input_df_name>",
                "type": "pandas.core.frame.DataFrame",
            },
            "x_column": {
                "name": "x_column",
                "default": None,
                "description": "(exactly a single column - often a datetime or string)",
                "type": "DBColumn",
            },
            "y_column": {
                "name": "y_column",
                "default": None,
                "description": "(exactly a single column - always a numerical value)",
                "type": "DBColumn",
            },
            "color_column": {
                "name": "color_column",
                "default": None,
                "description": "column name to use for line color or None",
                "type": "DBColumn",
            },
            "facet_column": {
                "name": "facet_column",
                "default": None,
                "description": "column name to use for faceting or None",
                "type": "DBColumn",
            },
            "aggregation_type": {
                "name": "aggregation_type",
                "default": ["mean", "median", "max", "min", "sum", "None"],
                "description": '"mean" if data must be aggregated, "None" if it is not aggregated',
                "type": "DropdownSingleSelect",
            },
            "line_group_column": {
                "name": "line_group_column",
                "default": None,
                "description": "column name or None - if specified, the line plot will have a separate line for each value in this column",
                "type": "DBColumn",
            },
            "plot_average_line": {
                "name": "plot_average_line",
                "default": ["False", "True"],
                "description": "True if the user wants to plot an average or median line",
                "type": "DropdownSingleSelect",
            },
            "average_line_type": {
                "name": "average_line_type",
                "default": ["mean", "median", "max", "min", "mode"],
                "description": "the kind of value for the average line to have. Can be mean, median, max, min, or mode. None if no average line required",
                "type": "DropdownSingleSelect",
            },
        },
        "toolbox": "plots",
        "output_metadata": [
            {
                "name": "output_df",
                "description": "pandas df",
                "type": "pandas.core.frame.DataFrame",
            }
        ],
    },
    "boxplot": {
        "function_name": "boxplot",
        "fn": boxplot,
        "code": inspect.getsource(boxplot),
        "tool_name": "Boxplot",
        "description": "Generates a boxplot using python's seaborn library. Also accepts a faceting column. This usually requires the full dataset and not summary statistics. Use the facet feature only when specifically asked for it.",
        "input_metadata": {
            "full_data": {
                "name": "full_data",
                "default": None,
                "description": '"global_dict.<input_df_name>"',
                "type": "pandas.core.frame.DataFrame",
            },
            "boxplot_x_column": {
                "name": "boxplot_x_column",
                "default": None,
                "description": "boxplot x column",
                "type": "DBColumn",
            },
            "boxplot_y_column": {
                "name": "boxplot_y_column",
                "default": None,
                "description": "boxplot y column",
                "type": "DBColumn",
            },
            "facet": {
                "name": "facet",
                "default": False,
                "description": "True if the user wants to facet the boxplot else False",
                "type": "bool",
            },
            "facet_column": {
                "name": "facet_column",
                "default": None,
                "description": "column name to use for faceting or None",
                "type": "DBColumn",
            },
            "color": {
                "name": "color",
                "description": "color to use for the boxplot",
                "default": [
                    "#000000",
                    "#009D94",
                    "#0057CF",
                    "#FFBD00",
                    "#FF5C1C",
                    "#691A6B",
                ],
                "type": "DropdownSingleSelect",
            },
            "opacity": {
                "name": "opacity",
                "default": [0.1, 0.2, 0.3, 0.4, 0.5],
                "description": "numerical value between 0 and 1",
                "type": "DropdownSingleSelect",
            },
        },
        "toolbox": "plots",
        "output_metadata": [
            {
                "name": "output_df",
                "description": "pandas dataframe",
                "type": "pandas.core.frame.DataFrame",
            }
        ],
    },
    "heatmap": {
        "function_name": "heatmap",
        "tool_name": "Heatmap",
        "fn": heatmap,
        "code": inspect.getsource(heatmap),
        "description": "Generates a heatmap using python's seaborn library. This accepts the full dataset as the first parameter, and not summary statistics or aggregates.",
        "input_metadata": {
            "full_data": {
                "name": "full_data",
                "default": None,
                "description": '"global_dict.<input_df_name>"',
                "type": "pandas.core.frame.DataFrame",
            },
            "x_column": {
                "name": "x_column",
                "default": None,
                "description": "heatmap_x_column",
                "type": "DBColumn",
            },
            "y_column": {
                "name": "y_column",
                "default": None,
                "description": "heatmap_y_column",
                "type": "DBColumn",
            },
            "color_column": {
                "name": "color_column",
                "default": None,
                "description": "heatmap_value_column",
                "type": "DBColumn",
            },
            "aggregation_type": {
                "name": "aggregation_type",
                "default": ["mean", "median", "max", "min", "sum"],
                "description": "a string (can be mean, median, max, min or sum)",
                "type": "DropdownSingleSelect",
            },
            "color_scale": {
                "name": "color_scale",
                "description": "color_scale (only if specified by the user. defaults to YlGnBu)",
                "default": [
                    "magma",
                    "inferno",
                    "plasma",
                    "viridis",
                    "cividis",
                    "twilight",
                    "twilight_shifted",
                    "turbo",
                    "Blues",
                    "BrBG",
                    "BuGn",
                    "BuPu",
                    "CMRmap",
                    "GnBu",
                    "Greens",
                    "Greys",
                    "OrRd",
                    "Oranges",
                    "PRGn",
                    "PiYG",
                    "PuBu",
                    "PuBuGn",
                    "PuOr",
                    "PuRd",
                    "Purples",
                    "RdBu",
                    "RdGy",
                    "RdPu",
                    "RdYlBu",
                    "RdYlGn",
                    "Reds",
                    "Spectral",
                    "Wistia",
                    "YlGn",
                    "YlGnBu",
                    "YlOrBr",
                    "YlOrRd",
                    "afmhot",
                    "autumn",
                    "binary",
                    "bone",
                    "brg",
                    "bwr",
                    "cool",
                    "coolwarm",
                    "copper",
                    "cubehelix",
                    "flag",
                    "gist_earth",
                    "gist_gray",
                    "gist_heat",
                    "gist_ncar",
                    "gist_rainbow",
                    "gist_stern",
                    "gist_yarg",
                    "gnuplot",
                    "gnuplot2",
                    "gray",
                    "hot",
                    "hsv",
                    "jet",
                    "nipy_spectral",
                    "ocean",
                    "pink",
                    "prism",
                    "rainbow",
                    "seismic",
                    "spring",
                    "summer",
                    "terrain",
                    "winter",
                    "Accent",
                    "Dark2",
                    "Paired",
                    "Pastel1",
                    "Pastel2",
                    "Set1",
                    "Set2",
                    "Set3",
                    "tab10",
                    "tab20",
                    "tab20b",
                    "tab20c",
                    "grey",
                    "gist_grey",
                    "gist_yerg",
                    "Grays",
                    "magma_r",
                    "inferno_r",
                    "plasma_r",
                    "viridis_r",
                    "cividis_r",
                    "twilight_r",
                    "twilight_shifted_r",
                    "turbo_r",
                    "Blues_r",
                    "BrBG_r",
                    "BuGn_r",
                    "BuPu_r",
                    "CMRmap_r",
                    "GnBu_r",
                    "Greens_r",
                    "Greys_r",
                    "OrRd_r",
                    "Oranges_r",
                    "PRGn_r",
                    "PiYG_r",
                    "PuBu_r",
                    "PuBuGn_r",
                    "PuOr_r",
                    "PuRd_r",
                    "Purples_r",
                    "RdBu_r",
                    "RdGy_r",
                    "RdPu_r",
                    "RdYlBu_r",
                    "RdYlGn_r",
                    "Reds_r",
                    "Spectral_r",
                    "Wistia_r",
                    "YlGn_r",
                    "YlGnBu_r",
                    "YlOrBr_r",
                    "YlOrRd_r",
                    "afmhot_r",
                    "autumn_r",
                    "binary_r",
                    "bone_r",
                    "brg_r",
                    "bwr_r",
                    "cool_r",
                    "coolwarm_r",
                    "copper_r",
                    "cubehelix_r",
                    "flag_r",
                    "gist_earth_r",
                    "gist_gray_r",
                    "gist_heat_r",
                    "gist_ncar_r",
                    "gist_rainbow_r",
                    "gist_stern_r",
                    "gist_yarg_r",
                    "gnuplot_r",
                    "gnuplot2_r",
                    "gray_r",
                    "hot_r",
                    "hsv_r",
                    "jet_r",
                    "nipy_spectral_r",
                    "ocean_r",
                    "pink_r",
                    "prism_r",
                    "rainbow_r",
                    "seismic_r",
                    "spring_r",
                    "summer_r",
                    "terrain_r",
                    "winter_r",
                    "Accent_r",
                    "Dark2_r",
                    "Paired_r",
                    "Pastel1_r",
                    "Pastel2_r",
                    "Set1_r",
                    "Set2_r",
                    "Set3_r",
                    "tab10_r",
                    "tab20_r",
                    "tab20b_r",
                    "tab20c_r",
                    "rocket",
                    "rocket_r",
                    "mako",
                    "mako_r",
                    "icefire",
                    "icefire_r",
                    "vlag",
                    "vlag_r",
                    "flare",
                    "flare_r",
                    "crest",
                    "crest_r",
                ],
                "type": "DropdownSingleSelect",
            },
        },
        "toolbox": "plots",
        "output_metadata": [
            {
                "name": "output_df",
                "description": "output df",
                "type": "pandas.core.frame.DataFrame",
            }
        ],
    },
}
